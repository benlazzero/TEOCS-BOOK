// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:

    DMux8Way(in=load, sel=address[0..2], a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h);

    RAM8(load=a, address=address[3..5], in=in, out=a1);
    RAM8(load=b, address=address[3..5], in=in, out=a2);
    RAM8(load=c, address=address[3..5], in=in, out=a3);
    RAM8(load=d, address=address[3..5], in=in, out=a4);
    RAM8(load=e, address=address[3..5], in=in, out=a5);
    RAM8(load=f, address=address[3..5], in=in, out=a6);
    RAM8(load=g, address=address[3..5], in=in, out=a7);
    RAM8(load=h, address=address[3..5], in=in, out=a8);

    Mux8Way16(a=a1, b=a2, c=a3, d=a4, e=a5, f=a6, g=a7, h=a8, sel=address[0..2], out=out);
}
